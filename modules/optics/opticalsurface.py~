"""
Set of classes to implement various types of optical surface
"""
from optics.opticalray import *
import math


Clear = 0
Refracting = 1
Reflecting = 2
#
#             Basic Surface 
#
class Surface:
    """
    Basic class for an arbitrary surface, need to be extended to be useful.
    """

    #
    #
    def __init__(self,pt,type):
        """
        Basic constructor to form a basic suurface
        param pt Position, the surface reference point
        param type int , the surface type
        """
        
        self.point = Position(pt)
        self.type = type
        #
        self.group = None
        
    #
    #
    def __repr__(self):
        """
        Implement the repr() method
        """
        return "Surface({0:s} , {1:d})".format(str(self.point),self.type)

    #          
    #
    def getPoint(self):
        """
        Method to get the surface point in global coordinates taking account
        that the Surface my belong to an OpticalGroup
        return Vector3d the reference point
        """
        if self.group == None:
            return self.point
        else:
            return self.group.point + self.point

    #
    #
    def makeStandAlone(self):
        """
        Method to make the Surface standalone, it is removed from any OpticalGroup
        and the reference point is re-set.
        """
        if self.group != None:
            self.point = self.getPoint()
            self.group.remove(self)
            self.group = None

    #
    #
    def getNormal(self,pt):
        """
        Abstract class to get normal at specified point which is assume to
        be on the surface.
        """
        print("Surface.getNormal needs to be be defined")
        return Director()

#
#
class FlatSurface(Surface):
    """
    Class to implement an Flat Surface wth specifed surface normal
    """
    #
    #
    def __init__(self,pt = Position(), normal = Director(0,0,1), type = Clear): 
        """
        Constructor
        param pt Position, reference point, (defaults to (0,0,0))
        param normal Director, the surface normal
        param type int (defaults to Clear)
        """
        Surface.__init__(self,pt,type)
        self.normal = Director(normal)
        
        
    #
    #
    def getNormal(self,pt):
        """
        Get surface normal at any point.
        """
        return self.normal

    #
    #    
    getDistance(self,pos,dirn):
        """
        Get the distance from specifed Postition to the surface
        """
        p = self.getPoint()      # Reference point
        dv = p - pos
        dist = self.normal.dot(dv)/self.nomal.dot(dirn)
        return dist
        
        
    
    
class CircularAperture(OpticalPlane):
    """
    Class to  implement a circular aperture
    """
    #
    #
    def __init__(self,pt = Position(), radius = 1.0):
        """
        Constuctor for a circular aperture
        param pt Position, the plane reference point
        param radius the radius of the aperture (deafults = 1.0)
        """
        OpticalPlane.__init__(self,py,Clear,radius)

        

#
#          
#
class OpticalGroup(list):
    """
     Class to hold a list of surfaces on order, this is the class typiucally used to represent a lens
    """
    #
    #
    def __init__(self,group_pt,*args):
        """
        Constrtructor to make an OpticalGroup and add any Surfaces supplied in the argument list.
        param group_pt Position, the Group reference point
        param *args, list of Surfaces to be added to the OpticalGroup in order
        """
        list.__init__(self)
        self.point = Position(group_pt)
        for s in args:
            self.add(s)

    #
    #      
    #
    def __repr__(self):
        """
        Implement repr() method with full details.
        """
        st = "OpticalGroup({0:s})".format(str(self.point))
        for s in self:
            st += "\n" + repr(s)
        return st

    #      
    #
    def add(self,s):
        """
        Method to add a Surface to the end of the OpticalGroup, it also updates the 
        .group variable is the Surface.
        param s Surface to be appended.
        """
        self.append(s)
        s.group = self

        
        
